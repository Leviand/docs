---
title: Auto Grid
---

:experimental:

:react:

= Auto Grid

// tag::description[]
Auto Grid is a tabular display for data collections that uses a Hilla browser-callable backend service and defines the columns from the Java entity definition.
// end::description[]

In the first example, the Auto Grid shows the products collection provided by the example `ProductService` backend. The component displays the data in a lazy-loaded sortable grid with columns for all the properties of the example `Product` entity.

[source,typescript]
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-basic.tsx[render,tags=snippet,indent=0,group=React]
----

The following sections explain how to define and use the Java data backend service with Auto Grid, and how to customize the resulting Auto Grid to your needs.

## Data Backend

For loading the data, Auto Grid requires a Hilla `@BrowserCallable` Java service that implements the `dev.hilla.CrudService<T>` interface. Hilla generates TypeScript objects with callable methods for such services. Import your generated service object in your React view, and use it as a value for the `<AutoGrid service={}/>` property.

[source,typescript]
.Auto Grid with the example `ProductService` backend
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-basic.tsx[tags=apply-backend,indent=0,group=React]
----

Auto Grid loads the data lazily by calling the `CrudService<T>.list(Pageable pageable, @Nullable Filter filter)` method. The backend should sort, filter, and paginate the data according to the call arguments.

In addition to the service, Auto Grid extracts column definitions using the metadata from a Hilla generated model class specified by the `<AutoGrid model{}/>` property.

### Using Spring Data JPA

If you use Spring Data JPA on the backend, you can integrate a JPA repository with Auto Grid by subclassing from the `dev.hilla.crud.CrudRepositoryService<T>` class as your Hilla browser-callable service.

[source,java]
.Example JPA repository
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/ProductRepository.java[tags=snippet,indent=0]
----

[source,java]
.Example JPA based data service
----
include::{root}/src/main/java/com/vaadin/demo/fusion/crud/ProductService.java[tags=snippet,indent=0]
----

## Customizing Columns

To choose which of the data properties should be displayed as columns in Auto Grid, and to specify the column order, set the property names to the `visibleColumns` property.

The following example uses only the `category`, `name`, and `price` properties in this order.

[source,typescript]
.Auto Grid with chosen columns
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-visible-columns.tsx[render,tags=snippet,indent=0,group=React]
----

## Filtering

Auto Grid supports filtering by using the criteria specified by the `filter` property.

In the example below, the data in Auto Grid is filered using the contains matcher for the `name` property.

[source,typescript]
.Auto Grid with a filter
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-filtering.tsx[render,tags=snippet,indent=0,group=React]
----

Note that you can combine several filtering criteria by using the `OrFilter` or `AndFilter` composite filter types.

## Grid Properties

You can additionally customize the underlying Grid component properties in Auto Grid.

The example below enables single-row selection in the Auto Grid by using a combination of the `onActiveItemChanged` event listener with the `selectedItems` property. Both are supported by the Grid component that Auto Grid uses under the hood.

[source,typescript]
.Auto Grid with a filter
----
include::{root}/frontend/demo/component/auto-grid/react/auto-grid-selection.tsx[render,tags=snippet,indent=0,group=React]
----

Read more on the properties and use cases supported by the <<../grid#,Grid component>> in the respective article.
